// @ts-nocheck
export default [
  {
    "statements": [
      "CREATE TABLE tasks (\n    id character varying NOT NULL,\n    slug character varying NOT NULL,\n    markdown character varying,\n    summary character varying NOT NULL,\n    type character varying NOT NULL,\n    impact integer,\n    sort_order integer,\n    status integer NOT NULL,\n    project_id character varying NOT NULL,\n    created_at timestamp without time zone NOT NULL,\n    created_by character varying NOT NULL,\n    assigned_by character varying,\n    assigned_at timestamp without time zone,\n    modified_at timestamp without time zone,\n    modified_by character varying,\n    CONSTRAINT tasks_pkey PRIMARY KEY (id)\n)",
      "CREATE TABLE labels (\n    id character varying NOT NULL,\n    name character varying NOT NULL,\n    color character varying,\n    project_id character varying NOT NULL,\n    CONSTRAINT labels_pkey PRIMARY KEY (id)\n)",
      "INSERT INTO \"public\".\"_electric_trigger_settings\" (\"namespace\", \"tablename\", \"flag\")\n  VALUES ('public', 'tasks', 1)\n  ON CONFLICT DO NOTHING;",
      "DROP TRIGGER IF EXISTS update_ensure_public_tasks_primarykey ON \"public\".\"tasks\";",
      "CREATE OR REPLACE FUNCTION update_ensure_public_tasks_primarykey_function()\nRETURNS TRIGGER AS $$\nBEGIN\n  IF OLD.\"id\" IS DISTINCT FROM NEW.\"id\" THEN\n    RAISE EXCEPTION 'Cannot change the value of column id as it belongs to the primary key';\n  END IF;\n  RETURN NEW;\nEND;\n$$ LANGUAGE plpgsql;",
      "CREATE TRIGGER update_ensure_public_tasks_primarykey\n  BEFORE UPDATE ON \"public\".\"tasks\"\n    FOR EACH ROW\n      EXECUTE FUNCTION update_ensure_public_tasks_primarykey_function();",
      "DROP TRIGGER IF EXISTS insert_public_tasks_into_oplog ON \"public\".\"tasks\";",
      "    CREATE OR REPLACE FUNCTION insert_public_tasks_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n      BEGIN\n        -- Get the flag value from _electric_trigger_settings\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'tasks';\n\n        IF flag_value = 1 THEN\n          -- Insert into _electric_oplog\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          VALUES (\n            'public',\n            'tasks',\n            'INSERT',\n            json_strip_nulls(json_build_object('id', new.\"id\")),\n            jsonb_build_object('assigned_at', new.\"assigned_at\", 'assigned_by', new.\"assigned_by\", 'created_at', new.\"created_at\", 'created_by', new.\"created_by\", 'id', new.\"id\", 'impact', new.\"impact\", 'markdown', new.\"markdown\", 'modified_at', new.\"modified_at\", 'modified_by', new.\"modified_by\", 'project_id', new.\"project_id\", 'slug', new.\"slug\", 'sort_order', new.\"sort_order\", 'status', new.\"status\", 'summary', new.\"summary\", 'type', new.\"type\"),\n            NULL,\n            NULL\n          );\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
      "CREATE TRIGGER insert_public_tasks_into_oplog\n  AFTER INSERT ON \"public\".\"tasks\"\n    FOR EACH ROW\n      EXECUTE FUNCTION insert_public_tasks_into_oplog_function();",
      "DROP TRIGGER IF EXISTS update_public_tasks_into_oplog ON \"public\".\"tasks\";",
      "    CREATE OR REPLACE FUNCTION update_public_tasks_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n      BEGIN\n        -- Get the flag value from _electric_trigger_settings\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'tasks';\n\n        IF flag_value = 1 THEN\n          -- Insert into _electric_oplog\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          VALUES (\n            'public',\n            'tasks',\n            'UPDATE',\n            json_strip_nulls(json_build_object('id', new.\"id\")),\n            jsonb_build_object('assigned_at', new.\"assigned_at\", 'assigned_by', new.\"assigned_by\", 'created_at', new.\"created_at\", 'created_by', new.\"created_by\", 'id', new.\"id\", 'impact', new.\"impact\", 'markdown', new.\"markdown\", 'modified_at', new.\"modified_at\", 'modified_by', new.\"modified_by\", 'project_id', new.\"project_id\", 'slug', new.\"slug\", 'sort_order', new.\"sort_order\", 'status', new.\"status\", 'summary', new.\"summary\", 'type', new.\"type\"),\n            jsonb_build_object('assigned_at', old.\"assigned_at\", 'assigned_by', old.\"assigned_by\", 'created_at', old.\"created_at\", 'created_by', old.\"created_by\", 'id', old.\"id\", 'impact', old.\"impact\", 'markdown', old.\"markdown\", 'modified_at', old.\"modified_at\", 'modified_by', old.\"modified_by\", 'project_id', old.\"project_id\", 'slug', old.\"slug\", 'sort_order', old.\"sort_order\", 'status', old.\"status\", 'summary', old.\"summary\", 'type', old.\"type\"),\n            NULL\n          );\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
      "CREATE TRIGGER update_public_tasks_into_oplog\n  AFTER UPDATE ON \"public\".\"tasks\"\n    FOR EACH ROW\n      EXECUTE FUNCTION update_public_tasks_into_oplog_function();",
      "DROP TRIGGER IF EXISTS delete_public_tasks_into_oplog ON \"public\".\"tasks\";",
      "    CREATE OR REPLACE FUNCTION delete_public_tasks_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n      BEGIN\n        -- Get the flag value from _electric_trigger_settings\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'tasks';\n\n        IF flag_value = 1 THEN\n          -- Insert into _electric_oplog\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          VALUES (\n            'public',\n            'tasks',\n            'DELETE',\n            json_strip_nulls(json_build_object('id', old.\"id\")),\n            NULL,\n            jsonb_build_object('assigned_at', old.\"assigned_at\", 'assigned_by', old.\"assigned_by\", 'created_at', old.\"created_at\", 'created_by', old.\"created_by\", 'id', old.\"id\", 'impact', old.\"impact\", 'markdown', old.\"markdown\", 'modified_at', old.\"modified_at\", 'modified_by', old.\"modified_by\", 'project_id', old.\"project_id\", 'slug', old.\"slug\", 'sort_order', old.\"sort_order\", 'status', old.\"status\", 'summary', old.\"summary\", 'type', old.\"type\"),\n            NULL\n          );\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
      "CREATE TRIGGER delete_public_tasks_into_oplog\n  AFTER DELETE ON \"public\".\"tasks\"\n    FOR EACH ROW\n      EXECUTE FUNCTION delete_public_tasks_into_oplog_function();",
      "INSERT INTO \"public\".\"_electric_trigger_settings\" (\"namespace\", \"tablename\", \"flag\")\n  VALUES ('public', 'labels', 1)\n  ON CONFLICT DO NOTHING;",
      "DROP TRIGGER IF EXISTS update_ensure_public_labels_primarykey ON \"public\".\"labels\";",
      "CREATE OR REPLACE FUNCTION update_ensure_public_labels_primarykey_function()\nRETURNS TRIGGER AS $$\nBEGIN\n  IF OLD.\"id\" IS DISTINCT FROM NEW.\"id\" THEN\n    RAISE EXCEPTION 'Cannot change the value of column id as it belongs to the primary key';\n  END IF;\n  RETURN NEW;\nEND;\n$$ LANGUAGE plpgsql;",
      "CREATE TRIGGER update_ensure_public_labels_primarykey\n  BEFORE UPDATE ON \"public\".\"labels\"\n    FOR EACH ROW\n      EXECUTE FUNCTION update_ensure_public_labels_primarykey_function();",
      "DROP TRIGGER IF EXISTS insert_public_labels_into_oplog ON \"public\".\"labels\";",
      "    CREATE OR REPLACE FUNCTION insert_public_labels_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n      BEGIN\n        -- Get the flag value from _electric_trigger_settings\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'labels';\n\n        IF flag_value = 1 THEN\n          -- Insert into _electric_oplog\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          VALUES (\n            'public',\n            'labels',\n            'INSERT',\n            json_strip_nulls(json_build_object('id', new.\"id\")),\n            jsonb_build_object('color', new.\"color\", 'id', new.\"id\", 'name', new.\"name\", 'project_id', new.\"project_id\"),\n            NULL,\n            NULL\n          );\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
      "CREATE TRIGGER insert_public_labels_into_oplog\n  AFTER INSERT ON \"public\".\"labels\"\n    FOR EACH ROW\n      EXECUTE FUNCTION insert_public_labels_into_oplog_function();",
      "DROP TRIGGER IF EXISTS update_public_labels_into_oplog ON \"public\".\"labels\";",
      "    CREATE OR REPLACE FUNCTION update_public_labels_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n      BEGIN\n        -- Get the flag value from _electric_trigger_settings\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'labels';\n\n        IF flag_value = 1 THEN\n          -- Insert into _electric_oplog\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          VALUES (\n            'public',\n            'labels',\n            'UPDATE',\n            json_strip_nulls(json_build_object('id', new.\"id\")),\n            jsonb_build_object('color', new.\"color\", 'id', new.\"id\", 'name', new.\"name\", 'project_id', new.\"project_id\"),\n            jsonb_build_object('color', old.\"color\", 'id', old.\"id\", 'name', old.\"name\", 'project_id', old.\"project_id\"),\n            NULL\n          );\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
      "CREATE TRIGGER update_public_labels_into_oplog\n  AFTER UPDATE ON \"public\".\"labels\"\n    FOR EACH ROW\n      EXECUTE FUNCTION update_public_labels_into_oplog_function();",
      "DROP TRIGGER IF EXISTS delete_public_labels_into_oplog ON \"public\".\"labels\";",
      "    CREATE OR REPLACE FUNCTION delete_public_labels_into_oplog_function()\n    RETURNS TRIGGER AS $$\n    BEGIN\n      DECLARE\n        flag_value INTEGER;\n      BEGIN\n        -- Get the flag value from _electric_trigger_settings\n        SELECT flag INTO flag_value FROM \"public\"._electric_trigger_settings WHERE namespace = 'public' AND tablename = 'labels';\n\n        IF flag_value = 1 THEN\n          -- Insert into _electric_oplog\n          INSERT INTO \"public\"._electric_oplog (namespace, tablename, optype, \"primaryKey\", \"newRow\", \"oldRow\", timestamp)\n          VALUES (\n            'public',\n            'labels',\n            'DELETE',\n            json_strip_nulls(json_build_object('id', old.\"id\")),\n            NULL,\n            jsonb_build_object('color', old.\"color\", 'id', old.\"id\", 'name', old.\"name\", 'project_id', old.\"project_id\"),\n            NULL\n          );\n        END IF;\n\n        RETURN NEW;\n      END;\n    END;\n    $$ LANGUAGE plpgsql;",
      "CREATE TRIGGER delete_public_labels_into_oplog\n  AFTER DELETE ON \"public\".\"labels\"\n    FOR EACH ROW\n      EXECUTE FUNCTION delete_public_labels_into_oplog_function();"
    ],
    "version": "20240520124857_885"
  }
]